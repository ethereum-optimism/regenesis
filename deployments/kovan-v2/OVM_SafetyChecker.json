{
  "address": "0xeb91D9059761aFa197deD7b1FB4228F7ea921d3e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytecode",
          "type": "bytes"
        }
      ],
      "name": "isBytecodeSafe",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x5fd7e2024d76674df64d9004bfc79403b8708ecdd98726e97a1a53f946001850",
  "receipt": {
    "to": null,
    "from": "0x18394B52d3Cb931dfA76F63251919D051953413d",
    "contractAddress": "0xeb91D9059761aFa197deD7b1FB4228F7ea921d3e",
    "transactionIndex": 1,
    "gasUsed": "234686",
    "logsBloom": "0x
    "blockHash": "0x156001de46bcd44ae0563a00d750d6ba81fc6c7e7da4c1af4926c8ea92218319",
    "transactionHash": "0x5fd7e2024d76674df64d9004bfc79403b8708ecdd98726e97a1a53f946001850",
    "logs": [],
    "blockNumber": 24199521,
    "cumulativeGasUsed": "301566",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "03aed03b958b1d37f90bd88d0f56dd85",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytecode\",\"type\":\"bytes\"}],\"name\":\"isBytecodeSafe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The Safety Checker verifies that contracts deployed on L2 do not contain any \\\"unsafe\\\" operations. An operation is considered unsafe if it would access state variables which are specific to the environment (ie. L1 or L2) in which it is executed, as this could be used to \\\"escape the sandbox\\\" of the OVM, resulting in non-deterministic fraud proofs.  That is, an attacker would be able to \\\"prove fraud\\\" on an honestly applied transaction. Note that a \\\"safe\\\" contract requires opcodes to appear in a particular pattern; omission of \\\"unsafe\\\" opcodes is necessary, but not sufficient. Compiler used: solc Runtime target: EVM\",\"kind\":\"dev\",\"methods\":{\"isBytecodeSafe(bytes)\":{\"params\":{\"_bytecode\":\"The bytecode to safety check.\"},\"returns\":{\"_0\":\"`true` if the bytecode is safe, `false` otherwise.\"}}},\"title\":\"OVM_SafetyChecker\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isBytecodeSafe(bytes)\":{\"notice\":\"Returns whether or not all of the provided bytecode is safe.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/optimistic-ethereum/OVM/execution/OVM_SafetyChecker.sol\":\"OVM_SafetyChecker\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/optimistic-ethereum/OVM/execution/OVM_SafetyChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/* Interface Imports */\\nimport { iOVM_SafetyChecker } from \\\"../../iOVM/execution/iOVM_SafetyChecker.sol\\\";\\n\\n/**\\n * @title OVM_SafetyChecker\\n * @dev  The Safety Checker verifies that contracts deployed on L2 do not contain any\\n * \\\"unsafe\\\" operations. An operation is considered unsafe if it would access state variables which\\n * are specific to the environment (ie. L1 or L2) in which it is executed, as this could be used\\n * to \\\"escape the sandbox\\\" of the OVM, resulting in non-deterministic fraud proofs. \\n * That is, an attacker would be able to \\\"prove fraud\\\" on an honestly applied transaction.\\n * Note that a \\\"safe\\\" contract requires opcodes to appear in a particular pattern;\\n * omission of \\\"unsafe\\\" opcodes is necessary, but not sufficient.\\n *\\n * Compiler used: solc\\n * Runtime target: EVM\\n */\\ncontract OVM_SafetyChecker is iOVM_SafetyChecker {\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Returns whether or not all of the provided bytecode is safe.\\n     * @param _bytecode The bytecode to safety check.\\n     * @return `true` if the bytecode is safe, `false` otherwise.\\n     */\\n    function isBytecodeSafe(\\n        bytes memory _bytecode\\n    )\\n        override\\n        external\\n        pure\\n        returns (\\n            bool\\n        )\\n    {\\n        // autogenerated by gen_safety_checker_constants.py\\n        // number of bytes to skip for each opcode\\n        uint256[8] memory opcodeSkippableBytes = [\\n            uint256(0x0001010101010101010101010000000001010101010101010101010101010000),\\n            uint256(0x0100000000000000000000000000000000000000010101010101000000010100),\\n            uint256(0x0000000000000000000000000000000001010101000000010101010100000000),\\n            uint256(0x0203040500000000000000000000000000000000000000000000000000000000),\\n            uint256(0x0101010101010101010101010101010101010101010101010101010101010101),\\n            uint256(0x0101010101000000000000000000000000000000000000000000000000000000),\\n            uint256(0x0000000000000000000000000000000000000000000000000000000000000000),\\n            uint256(0x0000000000000000000000000000000000000000000000000000000000000000)\\n        ];\\n        // Mask to gate opcode specific cases\\n        uint256 opcodeGateMask = ~uint256(0xffffffffffffffffffffffe000000000fffffffff070ffff9c0ffffec000f001);\\n        // Halting opcodes\\n        uint256 opcodeHaltingMask = ~uint256(0x4008000000000000000000000000000000000000004000000000000000000001);\\n        // PUSH opcodes\\n        uint256 opcodePushMask = ~uint256(0xffffffff000000000000000000000000);\\n\\n        uint256 codeLength;\\n        uint256 _pc;\\n        assembly {\\n            _pc := add(_bytecode, 0x20)\\n        }\\n        codeLength = _pc + _bytecode.length;\\n        do {\\n            // current opcode: 0x00...0xff\\n            uint256 opNum;\\n\\n            // inline assembly removes the extra add + bounds check\\n            assembly {\\n                let word := mload(_pc) //load the next 32 bytes at pc into word\\n\\n                // Look up number of bytes to skip from opcodeSkippableBytes and then update indexInWord\\n                // E.g. the 02030405 in opcodeSkippableBytes is the number of bytes to skip for PUSH1->4\\n                // We repeat this 6 times, thus we can only skip bytes for up to PUSH4 ((1+4) * 6 = 30 < 32).\\n                // If we see an opcode that is listed as 0 skippable bytes e.g. PUSH5,\\n                // then we will get stuck on that indexInWord and then opNum will be set to the PUSH5 opcode.\\n                let indexInWord := byte(0, mload(add(opcodeSkippableBytes, byte(0, word))))\\n                indexInWord := add(indexInWord, byte(0, mload(add(opcodeSkippableBytes, byte(indexInWord, word)))))\\n                indexInWord := add(indexInWord, byte(0, mload(add(opcodeSkippableBytes, byte(indexInWord, word)))))\\n                indexInWord := add(indexInWord, byte(0, mload(add(opcodeSkippableBytes, byte(indexInWord, word)))))\\n                indexInWord := add(indexInWord, byte(0, mload(add(opcodeSkippableBytes, byte(indexInWord, word)))))\\n                indexInWord := add(indexInWord, byte(0, mload(add(opcodeSkippableBytes, byte(indexInWord, word)))))\\n                _pc := add(_pc, indexInWord)\\n\\n                opNum := byte(indexInWord, word)\\n            }\\n\\n            // + push opcodes\\n            // + stop opcodes [STOP(0x00),JUMP(0x56),RETURN(0xf3),INVALID(0xfe)]\\n            // + caller opcode CALLER(0x33)\\n            // + blacklisted opcodes\\n            uint256 opBit = 1 << opNum;\\n            if (opBit & opcodeGateMask == 0) {\\n                if (opBit & opcodePushMask == 0) {\\n                    // all pushes are valid opcodes\\n                    // subsequent bytes are not opcodes. Skip them.\\n                    _pc += (opNum - 0x5e); // PUSH1 is 0x60, so opNum-0x5f = PUSHed bytes and we +1 to\\n                    // skip the _pc++; line below in order to save gas ((-0x5f + 1) = -0x5e)\\n                    continue;\\n                } else if (opBit & opcodeHaltingMask == 0) {\\n                    // STOP or JUMP or RETURN or INVALID (Note: REVERT is blacklisted, so not included here)\\n                    // We are now inside unreachable code until we hit a JUMPDEST!\\n                    do {\\n                        _pc++;\\n                        assembly {\\n                            opNum := byte(0, mload(_pc))\\n                        }\\n                        // encountered a JUMPDEST\\n                        if (opNum == 0x5b) break;\\n                        // skip PUSHed bytes\\n                        if ((1 << opNum) & opcodePushMask == 0) _pc += (opNum - 0x5f); // opNum-0x5f = PUSHed bytes (PUSH1 is 0x60)\\n                    } while (_pc < codeLength);\\n                    // opNum is 0x5b, so we don't continue here since the pc++ is fine\\n                } else if (opNum == 0x33) { // Caller opcode\\n                    uint256 firstOps; // next 32 bytes of bytecode\\n                    uint256 secondOps; // following 32 bytes of bytecode\\n\\n                    assembly {\\n                        firstOps := mload(_pc)\\n                        // 37 bytes total, 5 left over --> 32 - 5 bytes = 27 bytes = 216 bits\\n                        secondOps := shr(216, mload(add(_pc, 0x20)))\\n                    }\\n\\n                    // Call identity precompile\\n                    // CALLER POP PUSH1 0x00 PUSH1 0x04 GAS CALL\\n                    // 32 - 8 bytes = 24 bytes = 192\\n                    if ((firstOps >> 192) == 0x3350600060045af1) {\\n                        _pc += 8;\\n                    // Call EM and abort execution if instructed\\n                    // CALLER PUSH1 0x00 SWAP1 GAS CALL PC PUSH1 0x0E ADD JUMPI RETURNDATASIZE PUSH1 0x00 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x00 REVERT JUMPDEST RETURNDATASIZE PUSH1 0x01 EQ ISZERO PC PUSH1 0x0a ADD JUMPI PUSH1 0x01 PUSH1 0x00 RETURN JUMPDEST \\n                    } else if (firstOps == 0x336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a015760 && secondOps == 0x016000f35b) {\\n                        _pc += 37;\\n                    } else {\\n                        return false;\\n                    }\\n                    continue;\\n                } else {\\n                    // encountered a non-whitelisted opcode!\\n                    return false;\\n                }\\n            }\\n            _pc++;\\n        } while (_pc < codeLength);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xb1578ea95da5f6e7d5f5428ccc5efe629b3b9ef88fed7625fa7b78cdb9539508\",\"license\":\"MIT\"},\"contracts/optimistic-ethereum/iOVM/execution/iOVM_SafetyChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.8.0;\\n\\n/**\\n * @title iOVM_SafetyChecker\\n */\\ninterface iOVM_SafetyChecker {\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    function isBytecodeSafe(bytes calldata _bytecode) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0xde6639676d4ec4f77297652d5ede2429bc93e74e11fefd9e9de4bc92dd784878\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061034a806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a44eb59a14610030575b600080fd5b6100d66004803603602081101561004657600080fd5b81019060208101813564010000000081111561006157600080fd5b82018360208201111561007357600080fd5b8035906020019184600183028401116401000000008311171561009557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506100ea945050505050565b604080519115158252519081900360200190f35b60408051610100810182527e0101010101010101010101000000000101010101010101010101010101000081526b010101010101000000010100600160f81b016020808301919091526f0101010100000001010101010000000092820192909252630203040560e01b60608201527f0101010101010101010101010101010101010101010101010101010101010101608082015264010101010160d81b60a0820152600060c0820181905260e0820181905283519092741fffffffff000000000f8f000063f000013fff0ffe916a40000000000000000000026117ff60f31b039163ffffffff60601b1991870181019087015b8051600081811a880151811a82811a890151821a0182811a890151821a0182811a890151821a0182811a890151821a0182811a89015190911a01918201911a6001811b86811661032057808516610239575001605d1901610326565b80861661027e575b8280600101935050825160001a915081605b141561025e57610279565b6001821b851661027157918101605e1901915b838310610241575b610320565b816033141561030f578251602084015160d81c673350600060045af160c083901c14156102b057600885019450610306565b817f336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a0157601480156102e357508064016000f35b145b156102f357602585019450610306565b60009a5050505050505050505050610338565b50505050610326565b600098505050505050505050610338565b50506001015b8181106101dd57600196505050505050505b91905056fea164736f6c6343000706000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a44eb59a14610030575b600080fd5b6100d66004803603602081101561004657600080fd5b81019060208101813564010000000081111561006157600080fd5b82018360208201111561007357600080fd5b8035906020019184600183028401116401000000008311171561009557600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506100ea945050505050565b604080519115158252519081900360200190f35b60408051610100810182527e0101010101010101010101000000000101010101010101010101010101000081526b010101010101000000010100600160f81b016020808301919091526f0101010100000001010101010000000092820192909252630203040560e01b60608201527f0101010101010101010101010101010101010101010101010101010101010101608082015264010101010160d81b60a0820152600060c0820181905260e0820181905283519092741fffffffff000000000f8f000063f000013fff0ffe916a40000000000000000000026117ff60f31b039163ffffffff60601b1991870181019087015b8051600081811a880151811a82811a890151821a0182811a890151821a0182811a890151821a0182811a890151821a0182811a89015190911a01918201911a6001811b86811661032057808516610239575001605d1901610326565b80861661027e575b8280600101935050825160001a915081605b141561025e57610279565b6001821b851661027157918101605e1901915b838310610241575b610320565b816033141561030f578251602084015160d81c673350600060045af160c083901c14156102b057600885019450610306565b817f336000905af158600e01573d6000803e3d6000fd5b3d6001141558600a0157601480156102e357508064016000f35b145b156102f357602585019450610306565b60009a5050505050505050505050610338565b50505050610326565b600098505050505050505050610338565b50506001015b8181106101dd57600196505050505050505b91905056fea164736f6c6343000706000a",
  "devdoc": {
    "details": "The Safety Checker verifies that contracts deployed on L2 do not contain any \"unsafe\" operations. An operation is considered unsafe if it would access state variables which are specific to the environment (ie. L1 or L2) in which it is executed, as this could be used to \"escape the sandbox\" of the OVM, resulting in non-deterministic fraud proofs.  That is, an attacker would be able to \"prove fraud\" on an honestly applied transaction. Note that a \"safe\" contract requires opcodes to appear in a particular pattern; omission of \"unsafe\" opcodes is necessary, but not sufficient. Compiler used: solc Runtime target: EVM",
    "kind": "dev",
    "methods": {
      "isBytecodeSafe(bytes)": {
        "params": {
          "_bytecode": "The bytecode to safety check."
        },
        "returns": {
          "_0": "`true` if the bytecode is safe, `false` otherwise."
        }
      }
    },
    "title": "OVM_SafetyChecker",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isBytecodeSafe(bytes)": {
        "notice": "Returns whether or not all of the provided bytecode is safe."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}